#!/bin/bash -e

# Il a l'air cool ce petit fichier hein ? Je le trimballe de projet en projet et je l'ajuste selon le besoin, il m'est tellement utile.
# Jetez donc un oeil Ã  quicksave et quickload, mes meilleurs amis.

DATE=$(date +%Y-%m-%d)
FOLDER=$(basename "echo $PWD")
# Export User id and Group id for workspace container
puid=$(id -u)
pgid=$(id -g)
export puid
export pgid

help() {
    echo "################################### USAGE ###################################"
    echo "help                  : Display this help"
    echo "fresh_install         : Clear everything, build and launch all containers,"
    echo "                        and install your environment"
    echo "up                    : Build and launch all containers"
    echo "start                 : start all stopped containers"
    echo "stop                  : Stop all containers"
    echo "down                  : Stop and destroy all containers"
    echo "upfresh               : refresh all containers"
    echo "composerinstall       : Run composer install"
    echo "webcli                : Access to your web container in bash"
    echo "mysqlcli              : Access to your SQL container bash"
    echo "sql                   : Access to your SQL prompt"
    echo ""
    echo "######################### PROJECT SPECIFIC COMMANDS #########################"
    echo "quicksave             : creates a mysql dump named quickdump.sql"
    echo "quickload             : load the dump quickdump.sql"
    return 1
}

fresh_install() {
    echo "Fresh install of docker containers: clear everything, build and launch all containers"
    down
    # Clearing all in data, which means wipe of all databases
    sudo rm -r docker/data/*
    # sometimes logs directory is wrongly owned by root, let's make sure everything is ready for use
    echo "Assigning $USER:$GROUP to log directory"
    sudo rm -r docker/logs
    sudo mkdir docker/logs
    sudo mkdir docker/logs/apache2
    sudo mkdir docker/logs/mysql
    sudo mkdir docker/logs/php
    sudo chown -R $USER:$GROUP docker/logs

    # Creating symlink to ~/Documents/dumps for command import_dump
    if [ ! -e "dumps" ]; then
      if [ ! -d "$HOME/Documents/dumps" ]; then
        echo "Creating directory for dumps: '~/Documents/dumps'"
        mkdir $HOME/Documents/dumps
      fi
      echo "Creating a symbolic link 'dumps' to '~/Documents/dumps'"
      ln -s $HOME/Documents/dumps dumps
      echo "INFO: To use dump_import command, please put your database dumps in the directory"
      echo "      $HOME/Documents/dumps"
      echo "      Then call the command using the symbolic link created:"
      echo "      ./dockerdo dump_import dumps/sqldump.sql"
      sleep 10
    else
      if [ ! -L "dumps" ]; then
        echo "WARNING: you have a 'dumps' directory that is not a symbolic link"
        echo "         to use dump_import command, put your SQL dumps in this directory"
        sleep 5
      fi
    fi

    upfresh
    composer_install

  # project specific code goes here
#   cp phpunit.xml.docker phpunit.xml
  echo "Preparing database structure and data"
  sleep 10 # Waiting for DB container to be fully ready
  rm dumps/db_data.sql
  rm dumps/db_structure.sql
  cp install/*.sql dumps
  docker exec -it $(get_database_container_id) bash -c "mysql  webapp < /var/dumps/db_structure.sql"
  docker exec -it $(get_database_container_id) bash -c "mysql  webapp < /var/dumps/db_data.sql"
}

up() {
    docker-compose up -d
}

upfresh() {
    docker-compose up --force-recreate --build -d
}

start() {
    docker-compose start
}

down() {
    docker-compose down
}

stop() {
    docker-compose stop
}

mysqlcli() {
    docker exec -it $(get_database_container_id) bash
}

sql() {
    docker exec -it $(get_database_container_id) mysql -uroot -ppassword
}

webcli() {
    docker exec -it $(get_webserver_container_id) /bin/bash
}

# small terminal friendly
ps() {
  docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Names}}\t{{.State}}"
}

### ADVANCED COMMANDS ###

composer_install() {
    docker exec -it $(get_webserver_container_id) composer install
}

# REQUIRED PARAMETER : database name
quicksave() {
  if [ $# -ne 1 ]
      then
          echo "Missing database name in command parameters"
          exit 1
      fi
      docker exec -it $(get_database_container_id) bash -c "mysqldump  ${1} > /var/dumps/quickdump.sql"
}

# REQUIRED PARAMETER : database name
quickload() {
  if [ $# -ne 1 ]
  then
      echo "Missing database name in command parameters"
      exit 1
  fi
  echo "importing quickdump into database '${1}'"
  docker exec -it $(get_database_container_id) bash -c "mysql  ${1} < /var/dumps/quickdump.sql"
  date
}

# Drops the database $1 and recreates it
# REQUIRED parameter : database name
dropcreate () {
    if [ $# -ne 1 ]
    then
        echo "Missing database name in command parameters"
        exit 1
    fi
    echo "Dropping and  recreating database: ${1}"
    docker exec -it $(get_database_container_id) mysql -e "DROP DATABASE IF EXISTS ${1}; CREATE DATABASE ${1};"
}



# Import a dump into a database
# Use the symlink created at the root of the project to link directly to your ~/Documents/dumps
# REQUIRED PARAMETER : database name
# REQUIRED PARAMETER : path/to/file
dump_import() {
  if [ $# -ne 2 ]
      then
          echo "Missing database name and/or dump file to import."
          echo "Usage: import_dump databasename containerpath/to/dumpfile"
          echo "Example: import_dump test dumps/issue-1234/dump.sql"
          exit 1
      fi
  dropcreate $1
  echo "Importing '${2}' into database '${1}'..."
  docker exec -it $(get_database_container_id) bash -c "mysql  ${1} < /var/${2}"
  echo "Done!"
}

### INTERNAL FUNCTIONS ###

# This function will be called in several others
get_database_container_id() {
  echo $(docker ps -aqf "name=$FOLDER\_database" -f status=running --latest);
}

# This function will be called in several others
get_webserver_container_id() {
  echo $(docker ps -aqf "name=$FOLDER\_webserver" -f status=running --latest);
}

if [ -z "$1" ]; then
    help
else
    "$@"
fi
